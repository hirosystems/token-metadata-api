name: CI

on:
  push:
    branches:
      - master
      - develop
      - beta
    tags-ignore:
      - '**'
    paths-ignore:
      - '**/CHANGELOG.md'
      - '**/package.json'
  pull_request:
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'

      - name: Cache node modules
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          path: |
            ~/.npm
            **/node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install deps
        run: npm ci --audit=false

      - name: Lint ESLint
        run: npm run lint:eslint

      - name: Lint Prettier
        run: npm run lint:prettier

  test:
    strategy:
      fail-fast: false
      matrix:
        suite: [admin, api, chainhook, token-queue]
    runs-on: ubuntu-latest
    env:
      API_HOST: 127.0.0.1
      API_PORT: 3000
      PROMETHEUS_PORT: 9153
      PGHOST: 127.0.0.1
      PGPORT: 5432
      PGUSER: postgres
      PGPASSWORD: postgres
      PGDATABASE: postgres
      BLOCKCHAIN_API_PGHOST: 127.0.0.1
      BLOCKCHAIN_API_PGPORT: 5432
      BLOCKCHAIN_API_PGUSER: postgres
      BLOCKCHAIN_API_PGPASSWORD: postgres
      BLOCKCHAIN_API_PGDATABASE: postgres
      STACKS_NODE_RPC_HOST: 127.0.0.1
      STACKS_NODE_RPC_PORT: 24440
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'

      - name: Cache node modules
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          path: |
            ~/.npm
            **/node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install deps
        run: npm ci --audit=false

      - name: Setup integration environment
        run: |
          sudo ufw disable
          npm run testenv:run -- -d
          npm run testenv:logs -- --no-color &> docker-compose-logs.txt &

      - name: Run tests
        run: npm run test:${{ matrix.suite }} -- --coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Print integration environment logs
        run: cat docker-compose-logs.txt
        if: failure()

      - name: Teardown integration environment
        run: npm run testenv:stop
        if: always()
  
  build-publish:
    permissions:
      contents: write
      issues: write
      pull-requests: write
    runs-on: ubuntu-latest
    needs:
      - lint
      - test
    steps:
      - name: Generate release bot app token
        id: generate_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.HIROSYSTEMS_RELEASE_BOT_ID }}
          private-key: ${{ secrets.HIROSYSTEMS_RELEASE_BOT_PEM }}

      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN || secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          persist-credentials: false

      - name: Get bot user ID
        id: bot-user-id
        run: |
          echo "user-id=$(gh api "/users/${{ steps.generate_token.outputs.app-slug }}[bot]" --jq .id)" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ steps.generate_token.outputs.token }}

      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v4
        id: semantic
        # Only run on non-PR events or only PRs that aren't from forks
        if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
          SEMANTIC_RELEASE_PACKAGE: ${{ github.event.repository.name }}
          GIT_AUTHOR_EMAIL: "${{ steps.bot-user-id.outputs.user-id }}+${{ steps.generate_token.outputs.app-slug }}[bot]@users.noreply.github.com"
          GIT_COMMITTER_EMAIL: "${{ steps.bot-user-id.outputs.user-id }}+${{ steps.generate_token.outputs.app-slug }}[bot]@users.noreply.github.com"
        with:
          semantic_version: 19
          extra_plugins: |
            @semantic-release/changelog@6.0.3
            @semantic-release/git@10.0.1
            conventional-changelog-conventionalcommits@6.1.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker Meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            hirosystems/${{ github.event.repository.name }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}},value=${{ steps.semantic.outputs.new_release_version }},enable=${{ steps.semantic.outputs.new_release_version != '' }}
            type=semver,pattern={{major}}.{{minor}},value=${{ steps.semantic.outputs.new_release_version }},enable=${{ steps.semantic.outputs.new_release_version != '' }}

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build/Tag/Push Image
        uses: docker/build-push-action@v5
        with:
          context: .
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # Only push if (there's a new release on main branch, or if building a non-main branch) and (Only run on non-PR events or only PRs that aren't from forks)
          push: ${{ (github.ref != 'refs/heads/master' || steps.semantic.outputs.new_release_version != '') && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository) }}
